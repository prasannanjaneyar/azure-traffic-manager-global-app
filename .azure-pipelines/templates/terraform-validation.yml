steps:
- task: TerraformInstaller@1
  displayName: 'Install Terraform'
  inputs:
    terraformVersion: $(terraformVersion)

- task: AzureCLI@2
  displayName: 'Validate Global Configuration'
  inputs:
    azureSubscription: $(azureServiceConnection)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    workingDirectory: 'terraform/global'
    inlineScript: |
      echo "Validating Global Terraform Configuration..."
      terraform init -backend=false
      terraform validate
      
      if [ $? -eq 0 ]; then
        echo "✅ Global configuration is valid"
      else
        echo "❌ Global configuration validation failed"
        exit 1
      fi

- task: AzureCLI@2
  displayName: 'Validate Production Configuration'
  inputs:
    azureSubscription: $(azureServiceConnection)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    workingDirectory: 'terraform/environments/prod'
    inlineScript: |
      echo "Validating Production Environment Configuration..."
      
      # Check if main.tf exists
      if [ ! -f "main.tf" ]; then
        echo "❌ main.tf not found in production environment"
        exit 1
      fi
      
      # Validate Terraform configuration
      terraform init -backend=false
      terraform validate
      
      if [ $? -eq 0 ]; then
        echo "✅ Production configuration is valid"
      else
        echo "❌ Production configuration validation failed"
        exit 1
      fi

- task: Bash@3
  displayName: 'Check Required Modules'
  inputs:
    targetType: 'inline'
    script: |
      echo "Checking module dependencies..."
      
      modules=("networking" "app-service" "traffic-manager")
      
      for module in "${modules[@]}"; do
        module_path="terraform/modules/$module"
        
        if [ ! -d "$module_path" ]; then
          echo "❌ Module directory $module_path does not exist"
          exit 1
        fi
        
        # Check required files
        required_files=("main.tf" "variables.tf" "outputs.tf")
        for file in "${required_files[@]}"; do
          if [ ! -f "$module_path/$file" ]; then
            echo "❌ Required file $module_path/$file does not exist"
            exit 1
          fi
        done
        
        echo "✅ Module $module is properly structured"
      done
      
      echo "✅ All required modules are present and structured correctly"