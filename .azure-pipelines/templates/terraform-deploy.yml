parameters:
- name: environment
  type: string
- name: serviceConnection
  type: string
- name: terraformVersion
  type: string
- name: workingDirectory
  type: string
- name: runHealthCheck
  type: boolean
  default: false

steps:
- checkout: self
  displayName: 'Checkout Repository'

- task: TerraformInstaller@1
  displayName: 'Install Terraform ${{ parameters.terraformVersion }}'
  inputs:
    terraformVersion: ${{ parameters.terraformVersion }}

- task: TerraformTaskV4@4
  displayName: 'Terraform Init'
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: ${{ parameters.workingDirectory }}
    backendServiceArm: ${{ parameters.serviceConnection }}
    backendAzureRmResourceGroupName: $(TF_STATE_RESOURCE_GROUP)
    backendAzureRmStorageAccountName: $(TF_STATE_STORAGE_ACCOUNT)
    backendAzureRmContainerName: $(TF_STATE_CONTAINER)
    backendAzureRmKey: '${{ parameters.environment }}/terraform.tfstate'

- task: TerraformTaskV4@4
  displayName: 'Terraform Plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: ${{ parameters.workingDirectory }}
    environmentServiceNameAzureRM: ${{ parameters.serviceConnection }}
    commandOptions: '-out=tfplan -detailed-exitcode'

- task: Bash@3
  displayName: 'Generate Plan Summary'
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.workingDirectory }}
    script: |
      echo "=== Generating Plan Summary ==="
      if [ -f "tfplan" ]; then
        terraform show -no-color tfplan > tfplan.txt && \
        echo "##vso[task.setvariable variable=PlanSummaryExists]true" || \
        echo "##vso[task.setvariable variable=PlanSummaryExists]false"
      else
        echo "tfplan not found"
        echo "##vso[task.setvariable variable=PlanSummaryExists]false"
      fi
# Publish Terraform Plan
- task: PublishBuildArtifacts@1
  displayName: 'Publish Terraform Plan'
  inputs:
    pathToPublish: '${{ parameters.workingDirectory }}/tfplan'
    artifactName: 'terraform-plan-${{ parameters.environment }}'

# Publish Plan Summary
- task: PublishBuildArtifacts@1
  displayName: 'Publish Plan Summary'
  condition: eq(variables['PlanSummaryExists'], 'true')
  inputs:
    pathToPublish: '${{ parameters.workingDirectory }}/tfplan.txt'
    artifactName: 'terraform-plan-summary-${{ parameters.environment }}'

# Export Terraform Outputs to JSON file
- script: |
    terraform output -json > terraform/global/terraform-outputs.json
  workingDirectory: ${{ parameters.workingDirectory }}
  displayName: "Export Terraform Outputs"

# Publish Terraform Outputs
- task: PublishBuildArtifacts@1
  displayName: 'Publish Terraform Outputs'
  inputs:
    pathToPublish: 'terraform/global/terraform-outputs.json'
    artifactName: 'terraform-outputs-${{ parameters.environment }}'

# - task: PublishBuildArtifacts@1
#   displayName: 'Publish Terraform Plan'
#   inputs:
#     pathToPublish: '${{ parameters.workingDirectory }}/tfplan'
#     artifactName: 'terraform-plan-${{ parameters.environment }}'

# - task: PublishBuildArtifacts@1
#   displayName: 'Publish Plan Summary'
#   condition: eq(variables['PlanSummaryExists'], 'true')
#   inputs:
#     pathToPublish: '${{ parameters.workingDirectory }}/tfplan.txt'
#     artifactName: 'terraform-plan-summary-${{ parameters.environment }}'

# - task: TerraformTaskV4@4
#   displayName: 'Terraform Apply'
#   inputs:
#     provider: 'azurerm'
#     command: 'apply'
#     workingDirectory: ${{ parameters.workingDirectory }}
#     environmentServiceNameAzureRM: ${{ parameters.serviceConnection }}
#     commandOptions: '-auto-approve tfplan'

# # ✅ Export outputs to JSON
# - task: TerraformTaskV4@4
#   displayName: 'Terraform Output'
#   inputs:
#     provider: 'azurerm'
#     command: 'output'
#     workingDirectory: ${{ parameters.workingDirectory }}
#     environmentServiceNameAzureRM: ${{ parameters.serviceConnection }}
#     commandOptions: '-json'
#     outputTo: 'file'
#     fileName: 'terraform-outputs.json'

# # ✅ Publish outputs artifact
# - task: PublishBuildArtifacts@1
#   displayName: 'Publish Terraform Outputs'
#   inputs:
#     pathToPublish: '${{ parameters.workingDirectory }}/terraform-outputs.json'
#     artifactName: 'terraform-outputs-${{ parameters.environment }}'

# # Optional post-deployment health check
# - ${{ if eq(parameters.runHealthCheck, true) }}:
#   - task: PowerShell@2
#     displayName: 'Health Check'
#     inputs:
#       targetType: 'inline'
#       script: |
#         Write-Host "Starting health check..."
#         $outputsPath = "${{ parameters.workingDirectory }}/terraform-outputs.json"
#         if (Test-Path $outputsPath) {
#           $outputs = Get-Content $outputsPath | ConvertFrom-Json
#           Write-Host "Terraform outputs loaded successfully"
#           $fqdn = $outputs.traffic_manager_fqdn.value `
#             ?? $outputs.traffic_manager_profile_fqdn.value `
#             ?? ($outputs.application_urls.value.global_url -replace "https://", "")
#           if ($fqdn) { Write-Host "Checking $fqdn ..." }
#         } else {
#           Write-Host "⚠️ Terraform outputs not found"
#         }

# - task: Bash@3
#   displayName: 'Deployment Summary'
#   inputs:
#     targetType: 'inline'
#     workingDirectory: ${{ parameters.workingDirectory }}
#     script: |
#       echo "=== Deployment Summary ==="
#       echo "Environment: ${{ parameters.environment }}"
#       date -u
#       if [ -f "terraform-outputs.json" ]; then
#         echo "✅ Outputs available"
#         jq '.' terraform-outputs.json || cat terraform-outputs.json
#       else
#         echo "⚠️ No outputs file found"
#       fi

# - task: Bash@3
#   displayName: 'Cleanup'
#   condition: always()
#   inputs:
#     targetType: 'inline'
#     workingDirectory: ${{ parameters.workingDirectory }}
#     script: |
#       echo "Cleaning up temporary files..."
#       rm -f tfplan
#       find . -name "*.tmp" -delete || true
#       echo "✅ Cleanup completed"
