parameters:
- name: environment
  type: string
- name: serviceConnection
  type: string
- name: terraformVersion
  type: string
- name: workingDirectory
  type: string
- name: runHealthCheck
  type: boolean
  default: false

steps:
- checkout: self
  displayName: 'Checkout Repository'

- task: TerraformInstaller@1
  displayName: 'Install Terraform'
  inputs:
    terraformVersion: ${{ parameters.terraformVersion }}

- task: TerraformTaskV4@4
  displayName: 'Terraform Init'
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: ${{ parameters.workingDirectory }}
    backendServiceArm: ${{ parameters.serviceConnection }}
    backendAzureRmResourceGroupName: $(TF_STATE_RESOURCE_GROUP)
    backendAzureRmStorageAccountName: $(TF_STATE_STORAGE_ACCOUNT)
    backendAzureRmContainerName: $(TF_STATE_CONTAINER)
    backendAzureRmKey: '${{ parameters.environment }}/terraform.tfstate'

- task: TerraformTaskV4@4
  displayName: 'Terraform Plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: ${{ parameters.workingDirectory }}
    environmentServiceNameAzureRM: ${{ parameters.serviceConnection }}
    commandOptions: '-out=tfplan -detailed-exitcode'

- task: TerraformTaskV4@4
  displayName: 'Terraform Show'
  inputs:
    provider: 'azurerm'
    command: 'show'
    workingDirectory: ${{ parameters.workingDirectory }}
    environmentServiceNameAzureRM: ${{ parameters.serviceConnection }}
    commandOptions: '-no-color tfplan'
    outputTo: 'file'
    outputFormat: 'humanreadable'
    fileName: 'tfplan.txt'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Terraform Plan'
  inputs:
    pathToPublish: '${{ parameters.workingDirectory }}/tfplan'
    artifactName: 'terraform-plan-${{ parameters.environment }}'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Plan Summary'
  inputs:
    pathToPublish: '${{ parameters.workingDirectory }}/tfplan.txt'
    artifactName: 'terraform-plan-summary-${{ parameters.environment }}'

- task: TerraformTaskV4@4
  displayName: 'Terraform Apply'
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: ${{ parameters.workingDirectory }}
    environmentServiceNameAzureRM: ${{ parameters.serviceConnection }}
    commandOptions: '-auto-approve tfplan'

- task: TerraformTaskV4@4
  displayName: 'Terraform Output'
  inputs:
    provider: 'azurerm'
    command: 'output'
    workingDirectory: ${{ parameters.workingDirectory }}
    environmentServiceNameAzureRM: ${{ parameters.serviceConnection }}
    commandOptions: '-json'
    outputTo: 'file'
    fileName: 'terraform-outputs.json'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Terraform Outputs'
  inputs:
    pathToPublish: '${{ parameters.workingDirectory }}/terraform-outputs.json'
    artifactName: 'terraform-outputs-${{ parameters.environment }}'

- ${{ if eq(parameters.runHealthCheck, true) }}:
  - task: PowerShell@2
    displayName: 'Health Check'
    inputs:
      targetType: 'inline'
      script: |
        if (Test-Path "${{ parameters.workingDirectory }}/terraform-outputs.json") {
          $outputs = Get-Content "${{ parameters.workingDirectory }}/terraform-outputs.json" | ConvertFrom-Json
          $fqdn = $outputs.traffic_manager_fqdn.value
          
          if ($fqdn) {
            Write-Host "Starting health check for: $fqdn"
            
            $maxRetries = 10
            $retryInterval = 20
            
            for ($i = 1; $i -le $maxRetries; $i++) {
              try {
                $response = Invoke-WebRequest -Uri "https://$fqdn/health" -UseBasicParsing -TimeoutSec 30
                if ($response.StatusCode -eq 200) {
                  Write-Host "✅ Health check passed!"
                  return
                }
              }
              catch {
                Write-Host "❌ Health check failed: $($_.Exception.Message)"
              }
              
              if ($i -lt $maxRetries) {
                Start-Sleep -Seconds $retryInterval
              }
            }
          }
        }

- task: Bash@3
  displayName: 'Cleanup'
  condition: always()
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.workingDirectory }}
    script: |
      echo "Cleaning up temporary files..."
      rm -f tfplan
      echo "Cleanup completed"