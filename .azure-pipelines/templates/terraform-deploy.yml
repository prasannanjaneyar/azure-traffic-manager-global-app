parameters:
- name: environment
  type: string
- name: serviceConnection
  type: string
- name: terraformVersion
  type: string
- name: workingDirectory
  type: string
- name: runHealthCheck
  type: boolean
  default: false

steps:
- checkout: self
  displayName: 'Checkout Repository'

- task: TerraformInstaller@1
  displayName: 'Install Terraform ${{ parameters.terraformVersion }}'
  inputs:
    terraformVersion: ${{ parameters.terraformVersion }}

- task: TerraformTaskV4@4
  displayName: 'Terraform Init'
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: ${{ parameters.workingDirectory }}
    backendServiceArm: ${{ parameters.serviceConnection }}
    backendAzureRmResourceGroupName: $(TF_STATE_RESOURCE_GROUP)
    backendAzureRmStorageAccountName: $(TF_STATE_STORAGE_ACCOUNT)
    backendAzureRmContainerName: $(TF_STATE_CONTAINER)
    backendAzureRmKey: '${{ parameters.environment }}/terraform.tfstate'

- task: TerraformTaskV4@4
  displayName: 'Terraform Plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: ${{ parameters.workingDirectory }}
    environmentServiceNameAzureRM: ${{ parameters.serviceConnection }}
    commandOptions: '-out=tfplan -detailed-exitcode'

- task: Bash@3
  displayName: 'Generate Plan Summary'
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.workingDirectory }}
    script: |
      echo "=== Generating Plan Summary ==="
      
      # List files to debug
      echo "Files in working directory:"
      ls -la
      
      # Check if tfplan file exists
      if [ -f "tfplan" ]; then
        echo "✅ Plan file found, generating summary..."
        
        # Generate the summary
        if terraform show -no-color tfplan > tfplan.txt; then
          echo "✅ Plan summary generated successfully"
          echo "File size: $(du -h tfplan.txt | cut -f1)"
          echo "First 10 lines of summary:"
          head -10 tfplan.txt
          echo "Setting variable for conditional publishing..."
          echo "##vso[task.setvariable variable=PlanSummaryExists]true"
        else
          echo "❌ Failed to generate plan summary"
          echo "##vso[task.setvariable variable=PlanSummaryExists]false"
        fi
      else
        echo "❌ tfplan file not found in directory"
        echo "Available files:"
        find . -name "*plan*" -o -name "*.tf*" | head -10
        echo "##vso[task.setvariable variable=PlanSummaryExists]false"
      fi

- task: PublishBuildArtifacts@1
  displayName: 'Publish Terraform Plan'
  inputs:
    pathToPublish: '${{ parameters.workingDirectory }}/tfplan'
    artifactName: 'terraform-plan-${{ parameters.environment }}'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Plan Summary'
  condition: eq(variables['PlanSummaryExists'], 'true')
  inputs:
    pathToPublish: '${{ parameters.workingDirectory }}/tfplan.txt'
    artifactName: 'terraform-plan-summary-${{ parameters.environment }}'

- task: TerraformTaskV4@4
  displayName: 'Terraform Apply'
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: ${{ parameters.workingDirectory }}
    environmentServiceNameAzureRM: ${{ parameters.serviceConnection }}
    commandOptions: '-auto-approve tfplan'

- task: TerraformTaskV4@4
  displayName: 'Terraform Output'
  inputs:
    provider: 'azurerm'
    command: 'output'
    workingDirectory: ${{ parameters.workingDirectory }}
    environmentServiceNameAzureRM: ${{ parameters.serviceConnection }}
    commandOptions: '-json'
    outputTo: 'file'
    fileName: 'terraform-outputs.json'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Terraform Outputs'
  inputs:
    pathToPublish: '${{ parameters.workingDirectory }}/terraform-outputs.json'
    artifactName: 'terraform-outputs-${{ parameters.environment }}'

- ${{ if eq(parameters.runHealthCheck, true) }}:
  - task: PowerShell@2
    displayName: 'Health Check'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "Starting post-deployment health check..."
        
        $outputsPath = "${{ parameters.workingDirectory }}/terraform-outputs.json"
        
        if (Test-Path $outputsPath) {
          try {
            $outputs = Get-Content $outputsPath | ConvertFrom-Json
            Write-Host "Terraform outputs loaded successfully"
            
            # Try to get Traffic Manager FQDN from different possible output names
            $fqdn = $null
            if ($outputs.traffic_manager_fqdn) {
              $fqdn = $outputs.traffic_manager_fqdn.value
            } elseif ($outputs.traffic_manager_profile_fqdn) {
              $fqdn = $outputs.traffic_manager_profile_fqdn.value
            } elseif ($outputs.application_urls) {
              $fqdn = $outputs.application_urls.value.global_url -replace "https://", ""
            }
            
            if ($fqdn) {
              Write-Host "Starting health check for: $fqdn"
              
              $maxRetries = 15
              $retryInterval = 20
              
              for ($i = 1; $i -le $maxRetries; $i++) {
                Write-Host "Health check attempt $i/$maxRetries..."
                
                try {
                  # Try both HTTP and HTTPS
                  $healthUrls = @("https://$fqdn/health", "http://$fqdn/health", "https://$fqdn", "http://$fqdn")
                  
                  foreach ($url in $healthUrls) {
                    try {
                      Write-Host "Trying: $url"
                      $response = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 30
                      
                      if ($response.StatusCode -eq 200) {
                        Write-Host "✅ Health check passed for $url!"
                        Write-Host "Status Code: $($response.StatusCode)"
                        Write-Host "Response Length: $($response.Content.Length) bytes"
                        if ($response.Content.Length -lt 1000) {
                          Write-Host "Response Content: $($response.Content)"
                        }
                        return
                      }
                    }
                    catch {
                      Write-Host "Failed $url : $($_.Exception.Message)"
                    }
                  }
                }
                catch {
                  Write-Host "❌ Health check attempt $i failed: $($_.Exception.Message)"
                }
                
                if ($i -lt $maxRetries) {
                  Write-Host "Retrying in $retryInterval seconds..."
                  Start-Sleep -Seconds $retryInterval
                }
              }
              
              Write-Host "⚠️ Health check failed after $maxRetries attempts"
              Write-Host "This might be expected for initial deployment - infrastructure may still be starting up"
              Write-Host "##vso[task.logissue type=warning]Health check failed but deployment continues"
            } else {
              Write-Host "⚠️ Traffic Manager FQDN not found in outputs"
              Write-Host "Available outputs:"
              $outputs | ConvertTo-Json -Depth 3
            }
          }
          catch {
            Write-Host "❌ Error processing Terraform outputs: $($_.Exception.Message)"
          }
        } else {
          Write-Host "⚠️ Terraform outputs file not found at: $outputsPath"
          Write-Host "Available files in working directory:"
          Get-ChildItem "${{ parameters.workingDirectory }}" | Format-Table Name, Length, LastWriteTime
        }

- task: Bash@3
  displayName: 'Deployment Summary'
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.workingDirectory }}
    script: |
      echo "=== Deployment Summary ==="
      echo "Environment: ${{ parameters.environment }}"
      echo "Timestamp: $(date -u)"
      echo "Working Directory: $(pwd)"
      
      if [ -f "terraform-outputs.json" ]; then
        echo "✅ Terraform outputs available"
        
        # Extract key information if available
        if command -v jq &> /dev/null; then
          echo "Key Infrastructure Details:"
          echo "Traffic Manager FQDN: $(jq -r '.traffic_manager_fqdn.value // .traffic_manager_profile_fqdn.value // "N/A"' terraform-outputs.json)"
          echo "Resource Groups: $(jq -r '.primary_resource_group_name.value // "N/A"' terraform-outputs.json), $(jq -r '.secondary_resource_group_name.value // "N/A"' terraform-outputs.json)"
        fi
      else
        echo "⚠️ Terraform outputs not available"
      fi
      
      echo "✅ ${{ parameters.environment }} deployment completed successfully!"

- task: Bash@3
  displayName: 'Cleanup'
  condition: always()
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.workingDirectory }}
    script: |
      echo "Cleaning up temporary files..."
      
      # Remove plan file for security
      rm -f tfplan
      
      # Keep outputs file for artifacts but clean up other temp files
      find . -name "*.tmp" -delete 2>/dev/null || true
      find . -name ".terraform.lock.hcl.backup*" -delete 2>/dev/null || true
      
      echo "✅ Cleanup completed"