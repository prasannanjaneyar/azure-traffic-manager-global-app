trigger:
  branches:
    include:
    - master
  paths:
    include:
    - terraform/*
    - .azure-pipelines/*

pr:
  branches:
    include:
    - master
  paths:
    include:
    - terraform/*

variables:
  - name: terraformVersion
    value: '1.6.6'
  - name: vmImageName
    value: 'ubuntu-latest'
  - name: azureServiceConnection
    value: 'azure-terraform-service-connection'
  - name: TF_STATE_RESOURCE_GROUP
    value: 'tfstate-rg'
  - name: TF_STATE_STORAGE_ACCOUNT
    value: 'tfstateaccount09876'  # Replace with your actual storage account
  - name: TF_STATE_CONTAINER
    value: 'tfstate'

stages:
# ==========================================
# VALIDATION STAGE
# ==========================================
- stage: Validate
  displayName: 'Validate Terraform'
  jobs:
  - job: TerraformValidate
    displayName: 'Terraform Validation and Security Scan'
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self
      displayName: 'Checkout Repository'

    - task: TerraformInstaller@1
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: $(terraformVersion)

    - task: Bash@3
      displayName: 'Terraform Format Check'
      inputs:
        targetType: 'inline'
        script: |
          terraform fmt -check -recursive terraform/
          if [ $? -ne 0 ]; then
            echo "##vso[task.logissue type=error]Terraform files are not properly formatted"
            echo "Please run 'terraform fmt -recursive terraform/' to fix formatting"
            exit 1
          fi
          echo "✅ All Terraform files are properly formatted"

    - task: Bash@3
      displayName: 'Install and Run Security Scan'
      inputs:
        targetType: 'inline'
        script: |
          echo "Installing Trivy for security scanning..."
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          
          echo "Running security scan on Terraform files..."
          cd terraform/
          trivy config . --format table || echo "Security scan completed with findings"
          
          # Generate JSON report for artifacts
          trivy config . --format json --output trivy-results.json || true
          
          echo "✅ Security scan completed"
      continueOnError: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Security Scan Results'
      condition: always()
      inputs:
        pathToPublish: 'terraform/trivy-results.json'
        artifactName: 'security-scan-results'

    - template: templates/terraform-validation.yml

# ==========================================
# DEPLOY GLOBAL INFRASTRUCTURE
# ==========================================
- stage: DeployGlobal
  displayName: 'Deploy Global Infrastructure'
  dependsOn: Validate
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: GlobalInfrastructure
    displayName: 'Deploy Global Resources'
    environment: 'global'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - template: templates/terraform-deploy.yml
            parameters:
              environment: 'global'
              serviceConnection: $(azureServiceConnection)
              terraformVersion: $(terraformVersion)
              workingDirectory: 'terraform/global'

# ==========================================
# DEPLOY PRODUCTION ENVIRONMENT
# ==========================================
- stage: DeployProduction
  displayName: 'Deploy Production'
  dependsOn: DeployGlobal
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
  - template: variables/prod.yml
  jobs:
  - deployment: ProductionEnvironment
    displayName: 'Deploy to Production'
    environment: 'production'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - template: templates/terraform-deploy.yml
            parameters:
              environment: 'prod'
              serviceConnection: $(azureServiceConnection)
              terraformVersion: $(terraformVersion)
              workingDirectory: 'terraform/environments/prod'
              runHealthCheck: true

          - task: PowerShell@2
            displayName: 'Production Deployment Summary'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "🎉 PRODUCTION DEPLOYMENT COMPLETED SUCCESSFULLY! 🎉"
                Write-Host "=================================================="
                Write-Host "Build ID: $(Build.BuildId)"
                Write-Host "Build Number: $(Build.BuildNumber)"
                Write-Host "Source Branch: $(Build.SourceBranch)"
                Write-Host "Commit SHA: $(Build.SourceVersion)"
                Write-Host "Triggered by: $(Build.RequestedFor)"
                Write-Host "Deployment Time: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')"
                Write-Host "=================================================="
                
                # Create deployment summary file
                $deploymentSummary = @"
                # Production Deployment Summary
                
                ## Deployment Details
                - **Environment**: Production
                - **Build ID**: $(Build.BuildId)
                - **Build Number**: $(Build.BuildNumber)
                - **Source Branch**: $(Build.SourceBranch)
                - **Commit SHA**: $(Build.SourceVersion)
                - **Triggered by**: $(Build.RequestedFor)
                - **Deployment Time**: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
                
                ## Infrastructure Components
                - ✅ Global Infrastructure (Key Vault, Log Analytics)
                - ✅ Production Environment (Traffic Manager, App Services)
                - ✅ Primary Region: East US
                - ✅ Secondary Region: West Europe
                
                ## Post-Deployment
                - Health checks completed
                - Monitoring enabled
                - Traffic Manager configured
                
                ---
                *Deployment completed successfully via Azure DevOps Pipeline*
                "@
                
                $deploymentSummary | Out-File -FilePath "production-deployment-summary.md" -Encoding UTF8
                Write-Host "✅ Deployment summary created"

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Deployment Summary'
            inputs:
              pathToPublish: 'production-deployment-summary.md'
              artifactName: 'production-deployment-summary'

          - task: Bash@3
            displayName: 'Final Deployment Verification'
            inputs:
              targetType: 'inline'
              script: |
                echo "🔍 Running final deployment verification..."
                
                # Check if deployment was successful
                if [ -f "terraform/environments/prod/terraform-outputs.json" ]; then
                  echo "✅ Terraform outputs found"
                  
                  # Display key outputs if available
                  if command -v jq &> /dev/null; then
                    echo "📊 Key Infrastructure Details:"
                    echo "Traffic Manager FQDN: $(jq -r '.traffic_manager_fqdn.value // "N/A"' terraform/environments/prod/terraform-outputs.json)"
                    echo "Primary App URL: $(jq -r '.primary_app_service_url.value // "N/A"' terraform/environments/prod/terraform-outputs.json)"
                    echo "Secondary App URL: $(jq -r '.secondary_app_service_url.value // "N/A"' terraform/environments/prod/terraform-outputs.json)"
                  fi
                else
                  echo "⚠️ Terraform outputs not found - this may be expected for first deployment"
                fi
                
                echo "✅ Production deployment pipeline completed successfully!"
                echo "🚀 Your global application is now live!"